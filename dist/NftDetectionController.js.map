{"version":3,"file":"NftDetectionController.js","sourceRoot":"","sources":["../src/NftDetectionController.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BaseController,\n  BaseConfig,\n  BaseState,\n} from '@metamask/base-controller';\nimport type { NetworkState } from '@metamask/network-controller';\nimport type { PreferencesState } from '@metamask/preferences-controller';\nimport {\n  MAINNET,\n  OPENSEA_PROXY_URL,\n  OPENSEA_API_URL,\n  NetworkType,\n  fetchWithErrorHandling,\n  toChecksumHexAddress,\n} from '@metamask/controller-utils';\nimport type { NftController, NftState, NftMetadata } from './NftController';\n\nconst DEFAULT_INTERVAL = 180000;\n\n/**\n * @type ApiNft\n *\n * NFT object coming from OpenSea api\n * @property token_id - The NFT identifier\n * @property num_sales - Number of sales\n * @property background_color - The background color to be displayed with the item\n * @property image_url - URI of an image associated with this NFT\n * @property image_preview_url - URI of a smaller image associated with this NFT\n * @property image_thumbnail_url - URI of a thumbnail image associated with this NFT\n * @property image_original_url - URI of the original image associated with this NFT\n * @property animation_url - URI of a animation associated with this NFT\n * @property animation_original_url - URI of the original animation associated with this NFT\n * @property name - The NFT name\n * @property description - The NFT description\n * @property external_link - External link containing additional information\n * @property assetContract - The NFT contract information object\n * @property creator - The NFT owner information object\n * @property lastSale - When this item was last sold\n */\nexport interface ApiNft {\n  token_id: string;\n  num_sales: number | null;\n  background_color: string | null;\n  image_url: string | null;\n  image_preview_url: string | null;\n  image_thumbnail_url: string | null;\n  image_original_url: string | null;\n  animation_url: string | null;\n  animation_original_url: string | null;\n  name: string | null;\n  description: string | null;\n  external_link: string | null;\n  asset_contract: ApiNftContract;\n  creator: ApiNftCreator;\n  last_sale: ApiNftLastSale | null;\n}\n\n/**\n * @type ApiNftContract\n *\n * NFT contract object coming from OpenSea api\n * @property address - Address of the NFT contract\n * @property asset_contract_type - The NFT type, it could be `semi-fungible` or `non-fungible`\n * @property created_date - Creation date\n * @property collection - Object containing the contract name and URI of an image associated\n * @property schema_name - The schema followed by the contract, it could be `ERC721` or `ERC1155`\n * @property symbol - The NFT contract symbol\n * @property total_supply - Total supply of NFTs\n * @property description - The NFT contract description\n * @property external_link - External link containing additional information\n */\nexport interface ApiNftContract {\n  address: string;\n  asset_contract_type: string | null;\n  created_date: string | null;\n  schema_name: string | null;\n  symbol: string | null;\n  total_supply: string | null;\n  description: string | null;\n  external_link: string | null;\n  collection: {\n    name: string | null;\n    image_url?: string | null;\n  };\n}\n\n/**\n * @type ApiNftLastSale\n *\n * NFT sale object coming from OpenSea api\n * @property event_timestamp - Object containing a `username`\n * @property total_price - URI of NFT image associated with this owner\n * @property transaction - Object containing transaction_hash and block_hash\n */\nexport interface ApiNftLastSale {\n  event_timestamp: string;\n  total_price: string;\n  transaction: { transaction_hash: string; block_hash: string };\n}\n\n/**\n * @type ApiNftCreator\n *\n * NFT creator object coming from OpenSea api\n * @property user - Object containing a `username`\n * @property profile_img_url - URI of NFT image associated with this owner\n * @property address - The owner address\n */\nexport interface ApiNftCreator {\n  user: { username: string };\n  profile_img_url: string;\n  address: string;\n}\n\n/**\n * @type NftDetectionConfig\n *\n * NftDetection configuration\n * @property interval - Polling interval used to fetch new token rates\n * @property networkType - Network type ID as per net_version\n * @property selectedAddress - Vault selected address\n * @property tokens - List of tokens associated with the active vault\n */\nexport interface NftDetectionConfig extends BaseConfig {\n  interval: number;\n  networkType: NetworkType;\n  chainId: `0x${string}` | `${number}` | number;\n  selectedAddress: string;\n}\n\n/**\n * Controller that passively polls on a set interval for NFT auto detection\n */\nexport class NftDetectionController extends BaseController<\n  NftDetectionConfig,\n  BaseState\n> {\n  private intervalId?: ReturnType<typeof setTimeout>;\n\n  private getOwnerNftApi({\n    address,\n    offset,\n    useProxy,\n  }: {\n    address: string;\n    offset: number;\n    useProxy: boolean;\n  }) {\n    return useProxy\n      ? `${OPENSEA_PROXY_URL}/assets?owner=${address}&offset=${offset}&limit=50`\n      : `${OPENSEA_API_URL}/assets?owner=${address}&offset=${offset}&limit=50`;\n  }\n\n  private async getOwnerNfts(address: string) {\n    let nftApiResponse: { assets: ApiNft[] };\n    let nfts: ApiNft[] = [];\n    const openSeaApiKey = this.getOpenSeaApiKey();\n    let offset = 0;\n    let pagingFinish = false;\n    /* istanbul ignore if */\n    do {\n      nftApiResponse = await fetchWithErrorHandling({\n        url: this.getOwnerNftApi({ address, offset, useProxy: true }),\n        timeout: 15000,\n      });\n\n      if (openSeaApiKey && !nftApiResponse) {\n        nftApiResponse = await fetchWithErrorHandling({\n          url: this.getOwnerNftApi({\n            address,\n            offset,\n            useProxy: false,\n          }),\n          options: { headers: { 'X-API-KEY': openSeaApiKey } },\n          timeout: 15000,\n          // catch 403 errors (in case API key is down we don't want to blow up)\n          errorCodesToCatch: [403],\n        });\n      }\n\n      if (!nftApiResponse) {\n        return nfts;\n      }\n\n      nftApiResponse?.assets?.length !== 0\n        ? (nfts = [...nfts, ...nftApiResponse.assets])\n        : (pagingFinish = true);\n      offset += 50;\n    } while (!pagingFinish);\n\n    return nfts;\n  }\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'NftDetectionController';\n\n  private getOpenSeaApiKey: () => string | undefined;\n\n  private addNft: NftController['addNft'];\n\n  private getNftState: () => NftState;\n\n  /**\n   * Creates an NftDetectionController instance.\n   *\n   * @param options - The controller options.\n   * @param options.onNftsStateChange - Allows subscribing to assets controller state changes.\n   * @param options.onPreferencesStateChange - Allows subscribing to preferences controller state changes.\n   * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.\n   * @param options.getOpenSeaApiKey - Gets the OpenSea API key, if one is set.\n   * @param options.addNft - Add an NFT.\n   * @param options.getNftState - Gets the current state of the Assets controller.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      onPreferencesStateChange,\n      onNetworkStateChange,\n      getOpenSeaApiKey,\n      addNft,\n      getNftState,\n    }: {\n      onNftsStateChange: (listener: (nftsState: NftState) => void) => void;\n      onPreferencesStateChange: (\n        listener: (preferencesState: PreferencesState) => void,\n      ) => void;\n      onNetworkStateChange: (\n        listener: (networkState: NetworkState) => void,\n      ) => void;\n      getOpenSeaApiKey: () => string | undefined;\n      addNft: NftController['addNft'];\n      getNftState: () => NftState;\n    },\n    config?: Partial<NftDetectionConfig>,\n    state?: Partial<BaseState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      interval: DEFAULT_INTERVAL,\n      networkType: MAINNET,\n      chainId: '1',\n      selectedAddress: '',\n      disabled: true,\n    };\n    this.initialize();\n    this.getNftState = getNftState;\n    onPreferencesStateChange(({ selectedAddress, useNftDetection }) => {\n      const { selectedAddress: previouslySelectedAddress, disabled } =\n        this.config;\n\n      if (\n        selectedAddress !== previouslySelectedAddress ||\n        !useNftDetection !== disabled\n      ) {\n        this.configure({ selectedAddress, disabled: !useNftDetection });\n      }\n\n      if (useNftDetection !== undefined) {\n        if (useNftDetection) {\n          this.start();\n        } else {\n          this.stop();\n        }\n      }\n    });\n\n    onNetworkStateChange(({ providerConfig }) => {\n      this.configure({\n        networkType: providerConfig.type,\n        chainId: providerConfig.chainId as NftDetectionConfig['chainId'],\n      });\n    });\n    this.getOpenSeaApiKey = getOpenSeaApiKey;\n    this.addNft = addNft;\n  }\n\n  /**\n   * Start polling for the currency rate.\n   */\n  async start() {\n    if (!this.isMainnet() || this.disabled) {\n      return;\n    }\n\n    await this.startPolling();\n  }\n\n  /**\n   * Stop polling for the currency rate.\n   */\n  stop() {\n    this.stopPolling();\n  }\n\n  private stopPolling() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - An interval on which to poll.\n   */\n  private async startPolling(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.stopPolling();\n    await this.detectNfts();\n    this.intervalId = setInterval(async () => {\n      await this.detectNfts();\n    }, this.config.interval);\n  }\n\n  /**\n   * Checks whether network is mainnet or not.\n   *\n   * @returns Whether current network is mainnet.\n   */\n  isMainnet = (): boolean => this.config.networkType === MAINNET;\n\n  /**\n   * Triggers asset ERC721 token auto detection on mainnet. Any newly detected NFTs are\n   * added.\n   */\n  async detectNfts() {\n    /* istanbul ignore if */\n    if (!this.isMainnet() || this.disabled) {\n      return;\n    }\n    const { selectedAddress, chainId } = this.config;\n\n    /* istanbul ignore else */\n    if (!selectedAddress) {\n      return;\n    }\n\n    const apiNfts = await this.getOwnerNfts(selectedAddress);\n    const addNftPromises = apiNfts.map(async (nft: ApiNft) => {\n      const {\n        token_id,\n        num_sales,\n        background_color,\n        image_url,\n        image_preview_url,\n        image_thumbnail_url,\n        image_original_url,\n        animation_url,\n        animation_original_url,\n        name,\n        description,\n        external_link,\n        creator,\n        asset_contract: { address, schema_name },\n        last_sale,\n      } = nft;\n\n      let ignored;\n      /* istanbul ignore else */\n      const { ignoredNfts } = this.getNftState();\n      if (ignoredNfts.length) {\n        ignored = ignoredNfts.find((c) => {\n          /* istanbul ignore next */\n          return (\n            c.address === toChecksumHexAddress(address) &&\n            c.tokenId === token_id\n          );\n        });\n      }\n\n      /* istanbul ignore else */\n      if (!ignored) {\n        /* istanbul ignore next */\n        const nftMetadata: NftMetadata = Object.assign(\n          {},\n          { name },\n          creator && { creator },\n          description && { description },\n          image_url && { image: image_url },\n          num_sales && { numberOfSales: num_sales },\n          background_color && { backgroundColor: background_color },\n          image_preview_url && { imagePreview: image_preview_url },\n          image_thumbnail_url && { imageThumbnail: image_thumbnail_url },\n          image_original_url && { imageOriginal: image_original_url },\n          animation_url && { animation: animation_url },\n          animation_original_url && {\n            animationOriginal: animation_original_url,\n          },\n          schema_name && { standard: schema_name },\n          external_link && { externalLink: external_link },\n          last_sale && { lastSale: last_sale },\n        );\n\n        await this.addNft(address, token_id, nftMetadata, {\n          userAddress: selectedAddress,\n          chainId: chainId as string,\n        });\n      }\n    });\n    await Promise.all(addNftPromises);\n  }\n}\n\nexport default NftDetectionController;\n"]}