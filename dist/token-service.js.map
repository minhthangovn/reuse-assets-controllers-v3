{"version":3,"file":"token-service.js","sourceRoot":"","sources":["../src/token-service.ts"],"names":[],"mappings":"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","sourcesContent":["import { timeoutFetch } from '@metamask/controller-utils';\nimport { isTokenListSupportedForNetwork } from './assetsUtil';\nimport { NetworksChainId } from '@metamask/controller-utils';\n\nexport const TOKEN_END_POINT_API = 'https://token-api.metaswap.codefi.network';\nexport const TOKEN_METADATA_NO_SUPPORT_ERROR =\n  'TokenService Error: Network does not support fetchTokenMetadata';\n// Tron token URL\nexport const MAINNET_TOKEN_END_POINT_API = 'https://api.trongrid.io';\nexport const TRONGRID_TOKEN_END_POINT_API = 'https://api.shasta.trongrid.io';\nexport const NILE_TOKEN_END_POINT_API = 'https://nile.trongrid.io';\nexport const WALLET = 'wallet';\nexport const WALLETSOLIDITY = 'walletsolidity';\n\nexport const MAINNET_URL_LIST_TOKEN_API =\n  'https://list.justswap.link/justswap.json';\n\nfunction getTronENDPOINTAPI(chainId: string) {\n  let url = TRONGRID_TOKEN_END_POINT_API;\n\n  // switch (chainId) {\n  //   case NetworksChainId.TronMainet:\n  //     url = MAINNET_TOKEN_END_POINT_API;\n  //     break;\n  //   case NetworksChainId.TronShasta:\n  //     url = TRONGRID_TOKEN_END_POINT_API;\n  //     break;\n  //   case NetworksChainId.TronNile:\n  //     url = NILE_TOKEN_END_POINT_API;\n  //     break;\n  // }\n\n  return url;\n}\n\nfunction isTronNetwork(chainId: string) {\n  // NetworksChainId.TronMainet,\n  // NetworksChainId.TronShasta,\n  // NetworksChainId.TronNile,\n  const listTronChainId: string[] = ['728126428', '2494104990', '3448148188'];\n\n  return listTronChainId.indexOf(chainId) > -1;\n}\n\n/**\n * Get the tokens URL for a specific network.\n *\n * @param chainId - The chain ID of the network the tokens requested are on.\n * @returns The tokens URL.\n */\nfunction getTokensURL(chainId: string) {\n  // return isTronNetwork(chainId)\n  //   ? MAINNET_URL_LIST_TOKEN_API;\n  //   : `${TOKEN_END_POINT_API}/tokens/${chainId}`\n  return MAINNET_URL_LIST_TOKEN_API;\n}\n\n/**\n * Get the token metadata URL for the given network and token.\n *\n * @param chainId - The chain ID of the network the token is on.\n * @param tokenAddress - The token address.\n * @returns The token metadata URL.\n */\nfunction getTokenMetadataURL(chainId: string, tokenAddress: string) {\n  return isTronNetwork(chainId)\n    ? `${getTronENDPOINTAPI(\n        chainId,\n      )}/${WALLETSOLIDITY}/getassetissuebyname?value=${tokenAddress}`\n    : `${TOKEN_END_POINT_API}/token/${chainId}?address=${tokenAddress}`;\n}\n\nconst tenSecondsInMilliseconds = 10_000;\n\n// Token list averages 1.6 MB in size\n// timeoutFetch by default has a 500ms timeout, which will almost always timeout given the response size.\nconst defaultTimeout = tenSecondsInMilliseconds;\n\n/**\n * Fetch the list of token metadata for a given network. This request is cancellable using the\n * abort signal passed in.\n *\n * @param chainId - The chain ID of the network the requested tokens are on.\n * @param abortSignal - The abort signal used to cancel the request if necessary.\n * @param options - Additional fetch options.\n * @param options.timeout - The fetch timeout.\n * @returns The token list, or `undefined` if the request was cancelled.\n */\nexport async function fetchTokenList(\n  chainId: string,\n  abortSignal: AbortSignal,\n  { timeout = defaultTimeout } = {},\n): Promise<unknown> {\n  const tokenURL = getTokensURL(chainId);\n\n  // console.log('#### chainId: ', chainId);\n  // console.log('#### tokenURL: ', tokenURL);\n\n  const response = await queryApi(tokenURL, abortSignal, timeout);\n  if (response) {\n    return parseJsonResponseField(response, 'tokens');\n  } else {\n    return listTronToken;\n  }\n\n  // if (response) {\n  //   return parseJsonResponse(response);\n  // }\n  // return undefined;\n}\n\n/**\n * Fetch metadata for the token address provided for a given network. This request is cancellable\n * using the abort signal passed in.\n *\n * @param chainId - The chain ID of the network the token is on.\n * @param tokenAddress - The address of the token to fetch metadata for.\n * @param abortSignal - The abort signal used to cancel the request if necessary.\n * @param options - Additional fetch options.\n * @param options.timeout - The fetch timeout.\n * @returns The token metadata, or `undefined` if the request was either aborted or failed.\n */\nexport async function fetchTokenMetadata<T>(\n  chainId: string,\n  tokenAddress: string,\n  abortSignal: AbortSignal,\n  { timeout = defaultTimeout } = {},\n): Promise<T | undefined> {\n  if (!isTokenListSupportedForNetwork(chainId)) {\n    throw new Error(TOKEN_METADATA_NO_SUPPORT_ERROR);\n  }\n  const tokenMetadataURL = getTokenMetadataURL(chainId, tokenAddress);\n  const response = await queryApi(tokenMetadataURL, abortSignal, timeout);\n  if (response) {\n    return parseJsonResponse(response) as Promise<T>;\n  }\n  return undefined;\n}\n\n/**\n * Perform fetch request against the api.\n *\n * @param apiURL - The URL of the API to fetch.\n * @param abortSignal - The abort signal used to cancel the request if necessary.\n * @param timeout - The fetch timeout.\n * @returns Promise resolving request response.\n */\nasync function queryApi(\n  apiURL: string,\n  abortSignal: AbortSignal,\n  timeout: number,\n): Promise<Response | undefined> {\n  const fetchOptions: RequestInit = {\n    referrer: apiURL,\n    referrerPolicy: 'no-referrer-when-downgrade',\n    method: 'GET',\n    mode: 'cors',\n    signal: abortSignal,\n    cache: 'default',\n  };\n  fetchOptions.headers = new window.Headers();\n  fetchOptions.headers.set('Content-Type', 'application/json');\n  try {\n    return await timeoutFetch(apiURL, fetchOptions, timeout);\n  } catch (error) {\n    if (error instanceof Error && error.name === 'AbortError') {\n      console.log('Request is aborted');\n    }\n  }\n  return undefined;\n}\n\n/**\n * Parse an API response and return the response JSON data.\n *\n * @param apiResponse - The API response to parse.\n * @returns The response JSON data.\n * @throws Will throw if the response includes an error.\n */\nasync function parseJsonResponse(apiResponse: Response): Promise<unknown> {\n  const responseObj = await apiResponse.json();\n  // api may return errors as json without setting an error http status code\n  if (responseObj?.error) {\n    throw new Error(`TokenService Error: ${responseObj.error}`);\n  }\n  return responseObj;\n}\n\nasync function parseJsonResponseField(\n  apiResponse: Response,\n  field: string,\n): Promise<unknown> {\n  const responseObj: any = await parseJsonResponse(apiResponse);\n\n  // console.log('### parseJsonResponseField: ', responseObj);\n\n  return responseObj[field] ? responseObj[field] : responseObj;\n}\n\nconst listTronToken: Object[] = [\n  {\n    address: 'TEkxiTehnzSmSe2XqrBj4w32RUN966rdz8',\n    chainId: 1,\n    decimals: 6,\n    logoURI:\n      'https://static.tronscan.org/production/upload/logo/TEkxiTehnzSmSe2XqrBj4w32RUN966rdz81.png',\n    name: 'USD Coin',\n    symbol: 'USDC',\n  },\n  {\n    address: 'TSSMHYeV2uE9qYH95DqyoCuNCzEL1NvU3S',\n    chainId: 1,\n    decimals: 18,\n    logoURI:\n      'https://static.tronscan.org/production/logo/TSSMHYeV2uE9qYH95DqyoCuNCzEL1NvU3S.png',\n    name: 'SUN',\n    symbol: 'SUN',\n  },\n  {\n    address: 'TAFjULxiVgT4qWk6UZwjqwZXTSaGaqnVp4',\n    chainId: 1,\n    decimals: 18,\n    logoURI: 'https://static.tronscan.org/production/logo/1002000.png',\n    name: 'BitTorrent',\n    symbol: 'BTT',\n  },\n  {\n    address: 'TKkeiboTkxXKJpbmVFbv4a8ov5rAfRDMf9',\n    chainId: 1,\n    decimals: 18,\n    logoURI: 'https://static.tronscan.org/production/logo/SUNLogo.178d4636.png',\n    name: 'SUNOLD',\n    symbol: 'SUNOLD',\n  },\n  {\n    address: 'TFczxzPhnThNSqr5by8tvxsdCFRRz6cPNq',\n    chainId: 1,\n    decimals: 6,\n    logoURI:\n      'https://static.tronscan.org/production/upload/logo/TFczxzPhnThNSqr5by8tvxsdCFRRz6cPNq.png',\n    name: 'APENFT',\n    symbol: 'NFT',\n  },\n  {\n    address: 'TN3W4H6rK2ce4vX9YnFQHwKENnHjoxb3m9',\n    chainId: 1,\n    decimals: 8,\n    logoURI:\n      'https://static.tronscan.org/production/logo/TN3W4H6rK2ce4vX9YnFQHwKENnHjoxb3m9.png',\n    name: 'Bitcoin',\n    symbol: 'BTC',\n  },\n  {\n    address: 'TXpw8XeWYeTUd4quDskoUqeQPowRh4jY65',\n    chainId: 1,\n    decimals: 8,\n    logoURI:\n      'https://static.tronscan.org/production/logo/TXpw8XeWYeTUd4quDskoUqeQPowRh4jY65.png',\n    name: 'Wrapped BTC',\n    symbol: 'WBTC',\n  },\n  {\n    address: 'THb4CqiFdwNHsWsQCs4JhzwjMWys4aqCbF',\n    chainId: 1,\n    decimals: 18,\n    logoURI:\n      'https://static.tronscan.org/production/logo/THb4CqiFdwNHsWsQCs4JhzwjMWys4aqCbF.png',\n    name: 'Ethereum',\n    symbol: 'ETH',\n  },\n  {\n    address: 'TXWkP3jLBqRGojUih1ShzNyDaN5Csnebok',\n    chainId: 1,\n    decimals: 18,\n    logoURI:\n      'https://static.tronscan.org/production/logo/TXWkP3jLBqRGojUih1ShzNyDaN5Csnebok.png',\n    name: 'Wrapped ETH',\n    symbol: 'WETH',\n  },\n  {\n    address: 'TKfjV9RNKJJCqPvBtK8L7Knykh7DNWvnYt',\n    chainId: 1,\n    decimals: 6,\n    logoURI:\n      'https://static.tronscan.org/production/logo/TKfjV9RNKJJCqPvBtK8L7Knykh7DNWvnYt.png',\n    name: 'Wrapped BitTorrent',\n    symbol: 'WBTT',\n  },\n  {\n    address: 'TNUC9Qb1rRpS5CbWLmNMxXBjyFoydXjWFR',\n    chainId: 1,\n    decimals: 6,\n    logoURI:\n      'https://static.tronscan.org/production/upload/logo/TNUC9Qb1rRpS5CbWLmNMxXBjyFoydXjWFR.png',\n    name: 'Wrapped TRX',\n    symbol: 'WTRX',\n  },\n  {\n    address: 'TCFLL5dx5ZJdKnWuesXxi1VPwjLVmWZZy9',\n    chainId: 1,\n    decimals: 18,\n    logoURI: 'https://static.tronscan.org/production/logo/just_icon.png',\n    name: 'JUST GOV v1.0',\n    symbol: 'JST',\n  },\n  {\n    address: 'TLa2f6VPqDgRE67v1736s7bJ8Ray5wYjU7',\n    chainId: 1,\n    decimals: 6,\n    logoURI: 'https://static.tronscan.org/profile_images/JKtJTydD_400x400.jpg',\n    name: 'WINK',\n    symbol: 'WIN',\n  },\n  {\n    address: 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t',\n    chainId: 1,\n    decimals: 6,\n    logoURI: 'https://static.tronscan.org/production/logo/usdtlogo.png',\n    name: 'Tether USD',\n    symbol: 'USDT',\n  },\n  {\n    address: 'TMwFHYXLJaRUPeW6421aqXL4ZEzPRFGkGT',\n    chainId: 1,\n    decimals: 18,\n    logoURI: 'https://static.tronscan.org/production/logo/usdj.png',\n    name: 'JUST Stablecoin v1.0',\n    symbol: 'USDJ',\n  },\n  {\n    address: 'TUpMhErZL2fhh4sVNULAbNKLokS4GjC1F4',\n    chainId: 1,\n    decimals: 18,\n    logoURI:\n      'https://static.tronscan.org/production/logo/TUpMhErZL2fhh4sVNULAbNKLokS4GjC1F4.png',\n    name: 'TrueUSD',\n    symbol: 'TUSD',\n  },\n  {\n    address: 'TR3DLthpnDdCGabhVDbD3VMsiJoCXY3bZd',\n    chainId: 1,\n    decimals: 8,\n    logoURI:\n      'https://static.tronscan.org/production/logo/TR3DLthpnDdCGabhVDbD3VMsiJoCXY3bZd.png',\n    name: 'Litecoin',\n    symbol: 'LTC',\n  },\n  {\n    address: 'TDyvndWuvX5xTBwHPYJi7J3Yq8pq8yh62h',\n    chainId: 1,\n    decimals: 18,\n    logoURI:\n      'https://static.tronscan.org/production/logo/TDyvndWuvX5xTBwHPYJi7J3Yq8pq8yh62h.png',\n    name: 'HuobiToken',\n    symbol: 'HT',\n  },\n  {\n    address: 'TPYmHEhy5n8TCEfYGqW2rPxsghSfzghPDn',\n    chainId: 1,\n    decimals: 18,\n    logoURI:\n      'https://static.tronscan.org/production/upload/logo/TPYmHEhy5n8TCEfYGqW2rPxsghSfzghPDn.svg',\n    name: 'Decentralized USD',\n    symbol: 'USDD',\n  },\n  {\n    address: 'TMz2SWatiAtZVVcH2ebpsbVtYwUPT9EdjH',\n    chainId: 1,\n    decimals: 18,\n    logoURI:\n      'https://static.tronscan.org/production/upload/logo/new/busd-coin1.png',\n    name: 'BUSD Token',\n    symbol: 'BUSD',\n  },\n  {\n    address: 'TU3kjFuhtEo42tsCBtfYUAZxoqQ4yuSLQ5',\n    chainId: 1,\n    decimals: 18,\n    logoURI:\n      'https://static.tronscan.org/production/upload/logo/new/TU3kjFuhtEo42tsCBtfYUAZxoqQ4yuSLQ5.png',\n    name: 'staked TRX',\n    symbol: 'sTRX',\n  },\n];\n"]}